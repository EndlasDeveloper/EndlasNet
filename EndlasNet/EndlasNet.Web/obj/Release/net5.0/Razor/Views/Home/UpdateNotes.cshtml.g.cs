#pragma checksum "C:\Users\EndlasLaptop2\Desktop\EndlasNet\EndlasNet\EndlasNet.Web\Views\Home\UpdateNotes.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "eb35c0d6dac227ecc2f7c16c568b0236a9683654"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_UpdateNotes), @"mvc.1.0.view", @"/Views/Home/UpdateNotes.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\EndlasLaptop2\Desktop\EndlasNet\EndlasNet\EndlasNet.Web\Views\_ViewImports.cshtml"
using EndlasNet.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\EndlasLaptop2\Desktop\EndlasNet\EndlasNet\EndlasNet.Web\Views\_ViewImports.cshtml"
using EndlasNet.Web.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"eb35c0d6dac227ecc2f7c16c568b0236a9683654", @"/Views/Home/UpdateNotes.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"1b56846bc26cdbd87384895e8a386d772c1991b0", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_UpdateNotes : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("rel", new global::Microsoft.AspNetCore.Html.HtmlString("stylesheet"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/css/custom-style.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("type", new global::Microsoft.AspNetCore.Html.HtmlString("text/css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "eb35c0d6dac227ecc2f7c16c568b0236a96836544177", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n<style type=\"text/css\" media=\"screen\">\r\n\r\n    #update-notes-li{\r\n        margin-top:5px\r\n    }\r\n\r\n</style>\r\n");
#nullable restore
#line 9 "C:\Users\EndlasLaptop2\Desktop\EndlasNet\EndlasNet\EndlasNet.Web\Views\Home\UpdateNotes.cshtml"
  
    ViewData["Title"] = "Update notes";
    

#line default
#line hidden
#nullable disable
            WriteLiteral("<h1 class=\"display-4\">");
#nullable restore
#line 13 "C:\Users\EndlasLaptop2\Desktop\EndlasNet\EndlasNet\EndlasNet.Web\Views\Home\UpdateNotes.cshtml"
                 Write(ViewData["Title"]);

#line default
#line hidden
#nullable disable
            WriteLiteral(" - 5/27/2021</h1>\r\n<p>\r\n");
            WriteLiteral(@"    <div style=""color:white;font-size:18px;"">Finished tasks</div>
    <ul style=""font-size:14px;line-height:200%;"">

        <li class=""update-notes-li"">
            Changed part for work to reference image table to save memory (both PartForJob and PartForWorkOrder).
            This was a large back-end and front-end change. How to use this part of the app has changed from how it was prior.
        </li>
        <li class=""update-notes-li"">
            Added pdf attribute to LineItem (CertPdf). Added back-end/database code to alloow the new attribute to be stored. Added
            front-end code to create to allow user to set the pdf file. Added back-end code to allow the user selection to be saved in
            the db. After files were saving, added front-end code to display the pdf file (or at least an action link to download it) in
            Index, Details, Delete, and Edit view. Added functionality to edit to allow user to clear current pdf file selection, keep
            current selecti");
            WriteLiteral(@"onk, or change the current selection to something else.
        </li>
        <li class=""update-notes-li"">
            Job -> edit -> dropdown for customer used customer address as identifier; it now uses customer name to identify the rows in customer.
        </li>
        <li class=""update-notes-li"">
            StaticPowderInfo -> Details -> change from composition pdf to information pdf.
        </li>
        <li>
            Changed Details and Delete views in Job and WorkOrder to display 'Not completed' when the CompleteDate isn't set (i.e., it hasn't been completed yet).
        </li>
    </ul>


");
            WriteLiteral(@"    <div style=""color:white;font-size:18px;"">Todo</div>
    <ul style=""font-size:14px;line-height:200%;"">
        <li class=""update-notes-li"">
            Bug: Edit -> part for a job -> have current image then set ot non gives error.
        </li>
        <li class=""update-notes-li"">
            Fix all parts for work (it broke because of the last deploy's changes)
        </li>

        <li class=""update-notes-li"">
            Add 4 more image attributes to PartForWork (optional).
            names: Machining, Cladding, Finished, Used
        </li>
        <li class=""update-notes-li"">
            All parts for work -> add powder name and lot number to search filter functionality.
        </li>
        <li class=""update-notes-li"">
            Job -> Add short description to job quote dropdown display.
        </li>
        <li class=""update-notes-li"">
            Work -> add StartDate and PoDate as nullable attributes.
        </li>
        <li class=""update-notes-li"">
            Parts");
            WriteLiteral(@"ForWork -> want functionality to select columns to display then apply multiple to selected columns.
        </li>
        <li class=""update-notes-li"">
            PartsForJob -> Job part batch -> make name action link to apply attribute value to multiple parts for work. 
        </li>
        <li class=""update-notes-li"">
            Remove 'hr:min:sec' portion of the due date in all places possible.
        </li>
        <li class=""update-notes-li"">
            Action tab -> completed work, upload pdf (PackingSlip), work completed date
        </li>
        <li class=""update-notes-li"">
            Job -> edit -> make quote reference persist. Probably add some indication of what the current quote reference is.
        </li>
        <li class=""update-notes-li"">
            Jobs -> add number of line items to define upon work creation. 
        </li>
        <li class=""update-notes-li"">
            Work -> add CompletedDate attribute. 
        </li>

        <li class=""update-notes-li"">
   ");
            WriteLiteral(@"         Keep writing Moq tests now that the controllers that are important accept an interface repo as a parameter.
        </li>
        
        <li class=""update-notes-li"">
            PowderForPart -> allow to choose year to filter by.
        </li>
        <li class=""update-notes-li"">
            Summary of powders by lot number.
        </li>
        <li class=""update-notes-li"">
            Start looking at making reports from database data.
        </li>
        <li class=""update-notes-li"">
            Write unit tests for all of the Utility methods. Write unit tests for the controllers.
        </li>

    </ul>

");
            WriteLiteral(@"    <!--<div style=""color:white;font-size:18px;"">Bugs and known issues</div>
        <ul style=""font-size:14px;line-height:200%;"">
                <li class=""update-notes-li"">
            Make form minimum width a little wider for form pages.
        </li>
            <li class=""update-notes-li"">
                Some delete views have a UI flaw with the delete button not fitting on one line with action links.
            </li>
            <li class=""update-notes-li"">
                From LineItem, when the user clicks manage powders, the bottle powder name is correctly set. If the user
                navigates to a child view, and is forwarded back to index, the bottle powder name is no longer set.
            </li>
            <li class=""update-notes-li"">
                User isn't set for PowderOrders.
            </li>
            <li class=""update-notes-li"">
                Not all delete views have an indication whether other db items will be deleted as a result of the delete.
         ");
            WriteLiteral(@"   </li>
            <li class=""update-notes-li"">
                When a static part info is created (it has a customer fk reference), and then the customer fk entry is deleted,
                an exception is thrown.
            </li>
            <li class=""update-notes-li"">
                Some views do not have login protection implemented yet.
            </li>
        </ul>-->
");
            WriteLiteral(@"    <!--<div style=""color:white;font-size:18px;"">Other considerations</div>
    <ul style=""font-size:14px;line-height:200%;"">
        <li class=""update-notes-li"">
            Under create and edit view, mark elements that are optional/required.
        </li>
        <li class=""update-notes-li"">
            Implement start suffix for part batch initialization?
        </li>
        <li class=""update-notes-li"">
            Put a '?' icon on all data access level views (any view that allows user to interact with the db in any way). When clicked,
            show a description of the view's purpose within the context of data access and work flow.
        </li>
        <li class=""update-notes-li"">
            Look at activity logging (or just logging) in ASP.NET EF Core.
        </li>
        <li class=""update-notes-li"">
            Look for a coded UI test library.
        </li>
        <li class=""update-notes-li"">
            Consider paging and which views to implement paging with.
        <");
            WriteLiteral(@"/li>
        <li class=""update-notes-li"">
            Consider search bar on views with many rows to filter.
        </li>
        <li class=""update-notes-li"">
            Help tab development.
        </li>
        <li class=""update-notes-li"">
            Style upload buttons and enum referenced dropdowns.
        </li>
    </ul>-->
</p>
");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
