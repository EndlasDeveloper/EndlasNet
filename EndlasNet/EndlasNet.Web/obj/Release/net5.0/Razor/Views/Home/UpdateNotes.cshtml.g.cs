#pragma checksum "C:\Users\EndlasLaptop2\Desktop\EndlasNet\EndlasNet\EndlasNet.Web\Views\Home\UpdateNotes.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "7771eb24658c9e52191941b68142fb355334b86a"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_UpdateNotes), @"mvc.1.0.view", @"/Views/Home/UpdateNotes.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\EndlasLaptop2\Desktop\EndlasNet\EndlasNet\EndlasNet.Web\Views\_ViewImports.cshtml"
using EndlasNet.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\EndlasLaptop2\Desktop\EndlasNet\EndlasNet\EndlasNet.Web\Views\_ViewImports.cshtml"
using EndlasNet.Web.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"7771eb24658c9e52191941b68142fb355334b86a", @"/Views/Home/UpdateNotes.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"1b56846bc26cdbd87384895e8a386d772c1991b0", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_UpdateNotes : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("rel", new global::Microsoft.AspNetCore.Html.HtmlString("stylesheet"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/css/custom-style.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("type", new global::Microsoft.AspNetCore.Html.HtmlString("text/css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "7771eb24658c9e52191941b68142fb355334b86a4177", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n<style type=\"text/css\" media=\"screen\">\r\n\r\n    #update-notes-li{\r\n        margin-top:5px\r\n    }\r\n\r\n</style>\r\n");
#nullable restore
#line 9 "C:\Users\EndlasLaptop2\Desktop\EndlasNet\EndlasNet\EndlasNet.Web\Views\Home\UpdateNotes.cshtml"
  
    ViewData["Title"] = "Update notes";
    

#line default
#line hidden
#nullable disable
            WriteLiteral("<h1 class=\"display-4\">");
#nullable restore
#line 13 "C:\Users\EndlasLaptop2\Desktop\EndlasNet\EndlasNet\EndlasNet.Web\Views\Home\UpdateNotes.cshtml"
                 Write(ViewData["Title"]);

#line default
#line hidden
#nullable disable
            WriteLiteral(" - 6/25/2021</h1>\r\n<p>\r\n");
            WriteLiteral(@"    <div style=""color:white;font-size:18px;"">Finished tasks</div>
    <ul style=""font-size:14px;line-height:200%;"">
        <li class=""update-notes-li"">
            Added Report tab to front-end with action links for Inventory, Jobs and work orders, and Parts.
        </li>
        <li class=""update-notes-li"">
            Redo back-end structure from Work -> PartForWork to Work -> WorkItem -> PartForWork.
            (This is partly done - just need to remove the old entity relationships after fron-end is complete)
        </li>
        <li class=""update-notes-li"">
            Redo front-end structure to represent Work -> WorkItem -> PartForWork from Work -> PartForWork
            <ul>
                <li>
                    Work -> Added manage work items action link to jobs index.
                </li>
                <li>
                    Work -> Added number of work items to  the UI for job create. Successfully creates the defined number of child work item entities for
              ");
            WriteLiteral(@"      the parent work (job).
                </li>
                <li>
                    Work -> manage work items action link forwards user to work items index view. The index shows the work items for the row selected under jobs.
                    If the work item row is uninitialized, the row information will display starts and the  UI only allows for initializataion under each row.
                </li>
                <li>
                    WorkItem -> Added initialize view. Currently doesn't have any forms to fill out, but on submit, the row attribute IsInitiazed is set to true and saved.
                    The UI correctly displays the alternate row display option where Edit, Details, and Unitialize action links are shown.
                </li>
                <li>
                    WorkItem -> Index view -> Added views for Edit, Details, and Unitialize.
                </li>
                <li>
                    WorkItem -> Added viewes for initialize and uninitialize (simila");
            WriteLiteral(@"r to line items). Added form elements to initialize view for static part info and and number of parts.
                </li>
                <li>
                    WorkItem -> Initialize -> On submit, the work item is initialized (attribute set in db). Index view changes to show attributes after initialization.
                </li>
                <li>
                    Disabled all action links to parts for work. This is to avoid build errors when the back-end is changed.
                </li>
                <li>
                    Changed back-end to have start date, complete date, and static part info in work items (moved out of job and part for work).
                </li>
                <li>
                    Changed the initialize functionality to allow user to choose start date, complete date, and and static part info.
                </li>
                <li>
                    Added edit functionality to work items. Allows user to change part info, dates, and work item part");
            WriteLiteral(@" batch image.
                </li>
                <li>
                    Made back-end change to allow an image file to be saved in work items. This serves as a replacement for the part image that was
                    previously in part for work and referenced an image table.
                </li>
                <li>
                    Added functionality to allow the user to manage part batch (from work item). User is forwarded to an index-like page where only
                    the parts in the part batch are shown (ie only shows the part for work entities that belong to the work item row).
                </li>
                <li>
                    Added functionality to allow user to see details and edit the part for work.
                </li>
            </ul>
        </li>
    </ul>


");
            WriteLiteral(@"    <div style=""color:white;font-size:18px;"">Todo</div>
    <ul style=""font-size:14px;line-height:200%;"">
        <li class=""update-notes-li"">
            Decided that the work -> work item -> part for work front-end UI mechanics should function similar to powder order -> line item -> powder bottle work flow.
        </li>
        <li class=""update-notes-li"">
            Fix issue under inventory -> all powder
        </li>
        <li class=""update-notes-li"">
            Fix all parts for work (it broke because of the last deploy's changes)
        </li>
        <li class=""update-notes-li"">
            All parts for work -> add powder name and lot number to search filter functionality.
        </li>
        <li class=""update-notes-li"">
            PartsForWork -> want functionality to select columns to display then apply multiple to selected columns.
        </li>
        <li class=""update-notes-li"">
            PartsForJob -> Job part batch -> make name action link to apply attribute value");
            WriteLiteral(@" to multiple parts for work.
        </li>
        <li class=""update-notes-li"">
            Remove 'hr:min:sec' portion of the due date in all places possible.
        </li>
        <li class=""update-notes-li"">
            Action tab -> completed work, upload pdf (PackingSlip), work completed date
        </li>

        <li class=""update-notes-li"">
            Keep writing Moq tests now that the controllers that are important accept an interface repo as a parameter.
        </li>
        <li class=""update-notes-li"">
            PowderForPart -> allow to choose year to filter by.
        </li>
        <li class=""update-notes-li"">
            Summary of powders by lot number.
        </li>
        <li class=""update-notes-li"">
            Start looking at making reports from database data.
        </li>
        <li class=""update-notes-li"">
            Write unit tests for all of the Utility methods. Write unit tests for the controllers.
        </li>

    </ul>

");
            WriteLiteral(@"      


        <!--<div style=""color:white;font-size:18px;"">Bugs and known issues</div>
            <ul style=""font-size:14px;line-height:200%;"">
                    <li class=""update-notes-li"">
                Make form minimum width a little wider for form pages.
            </li>
                <li class=""update-notes-li"">
                    Some delete views have a UI flaw with the delete button not fitting on one line with action links.
                </li>
                <li class=""update-notes-li"">
                    From LineItem, when the user clicks manage powders, the bottle powder name is correctly set. If the user
                    navigates to a child view, and is forwarded back to index, the bottle powder name is no longer set.
                </li>
                <li class=""update-notes-li"">
                    User isn't set for PowderOrders.
                </li>
                <li class=""update-notes-li"">
                    Not all delete views have an indicat");
            WriteLiteral(@"ion whether other db items will be deleted as a result of the delete.
                </li>
                <li class=""update-notes-li"">
                    When a static part info is created (it has a customer fk reference), and then the customer fk entry is deleted,
                    an exception is thrown.
                </li>
                <li class=""update-notes-li"">
                    Some views do not have login protection implemented yet.
                </li>
            </ul>-->
");
            WriteLiteral(@"        <!--<div style=""color:white;font-size:18px;"">Other considerations</div>
        <ul style=""font-size:14px;line-height:200%;"">
            <li class=""update-notes-li"">
                Under create and edit view, mark elements that are optional/required.
            </li>
            <li class=""update-notes-li"">
                Implement start suffix for part batch initialization?
            </li>
            <li class=""update-notes-li"">
                Put a '?' icon on all data access level views (any view that allows user to interact with the db in any way). When clicked,
                show a description of the view's purpose within the context of data access and work flow.
            </li>
            <li class=""update-notes-li"">
                Look at activity logging (or just logging) in ASP.NET EF Core.
            </li>
            <li class=""update-notes-li"">
                Look for a coded UI test library.
            </li>
            <li class=""update-notes-li"">
    ");
            WriteLiteral(@"            Consider paging and which views to implement paging with.
            </li>
            <li class=""update-notes-li"">
                Consider search bar on views with many rows to filter.
            </li>
            <li class=""update-notes-li"">
                Help tab development.
            </li>
            <li class=""update-notes-li"">
                Style upload buttons and enum referenced dropdowns.
            </li>
        </ul>-->
</p>
");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
