<link rel="stylesheet" href="~/css/custom-style.css" type="text/css" />
<style type="text/css" media="screen">

    #update-notes-li{
        margin-top:5px
    }

</style>
@{
    ViewData["Title"] = "Update notes";
    
}
<h1 class="display-4">@ViewData["Title"] - 5/4/2021</h1>
<p>
    @* ****** FINISHED TASKS ****** *@
    <div style="color:white;font-size:18px;">Finished tasks</div>
    <ul style="font-size:14px;line-height:200%;">
        <li class="update-notes-li">
            Added display line in PowderForPart for create user identification.
        </li>
        <li class="update-notes-li">
            MachiningTool -> Default unit to inches and removed mils and cm.
        </li>
        <li class="update-notes-li">
            Fixed bug: StaticPowderInfo -> composition pdf download not working (also in StaticPartInfo, Work, others too). Now all working as expected.
            Problem was in possibly an update to one of the Nuget packages where the variable name for the route data needed to be 'myvar' verbatim.
        </li>
    </ul>


    @* ****** TODO ****** *@
    <div style="color:white;font-size:18px;">Todo</div>
    <ul style="font-size:14px;line-height:200%;">

        <li class="update-notes-li">
            PartForWork -> filter rows by PO date (by year/month/day).
        </li>
        <li class="update-notes-li">
            PowderForPart -> allow to choose year to filter by.
        </li>
        <li class="update-notes-li">
            Consider other places to define units.
        </li>
        <li class="update-notes-li">
            Summary of powders by lot number.
        </li>
        <li class="update-notes-li">
            Start looking at making reports from database data.
        </li>
        <li class="update-notes-li">
            Write unit tests for all of the Utility methods. Write unit tests for the controllers.
        </li>
        <li class="update-notes-li">
            Implement repository pattern for more entities and replace the direct context calls in the controllers.
        </li>
        <li class="update-notes-li">
            Add interface for repoository classes so they can be tested with Moq.
        </li>
    </ul>

    @* ****** KNOWN ISSUES ****** *@
    <!--<div style="color:white;font-size:18px;">Bugs and known issues</div>
        <ul style="font-size:14px;line-height:200%;">
                <li class="update-notes-li">
            Make form minimum width a little wider for form pages.
        </li>
            <li class="update-notes-li">
                Some delete views have a UI flaw with the delete button not fitting on one line with action links.
            </li>
            <li class="update-notes-li">
                From LineItem, when the user clicks manage powders, the bottle powder name is correctly set. If the user
                navigates to a child view, and is forwarded back to index, the bottle powder name is no longer set.
            </li>
            <li class="update-notes-li">
                User isn't set for PowderOrders.
            </li>
            <li class="update-notes-li">
                Not all delete views have an indication whether other db items will be deleted as a result of the delete.
            </li>
            <li class="update-notes-li">
                When a static part info is created (it has a customer fk reference), and then the customer fk entry is deleted,
                an exception is thrown.
            </li>
            <li class="update-notes-li">
                Some views do not have login protection implemented yet.
            </li>
        </ul>-->
    @* ****** OTHER CONSIDERATIONS ****** *@
    <!--<div style="color:white;font-size:18px;">Other considerations</div>
    <ul style="font-size:14px;line-height:200%;">
        <li class="update-notes-li">
            Under create and edit view, mark elements that are optional/required.
        </li>
        <li class="update-notes-li">
            Implement start suffix for part batch initialization?
        </li>
        <li class="update-notes-li">
            Put a '?' icon on all data access level views (any view that allows user to interact with the db in any way). When clicked,
            show a description of the view's purpose within the context of data access and work flow.
        </li>
        <li class="update-notes-li">
            Look at activity logging (or just logging) in ASP.NET EF Core.
        </li>
        <li class="update-notes-li">
            Look for a coded UI test library.
        </li>
        <li class="update-notes-li">
            Consider paging and which views to implement paging with.
        </li>
        <li class="update-notes-li">
            Consider search bar on views with many rows to filter.
        </li>
        <li class="update-notes-li">
            Help tab development.
        </li>
        <li class="update-notes-li">
            Style upload buttons and enum referenced dropdowns.
        </li>
    </ul>-->
</p>
